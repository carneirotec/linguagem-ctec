
    TinyCC
    ======

    This file contains specific information for usage of TinyCC
    under MS-Windows.  See ctec-doc.html to have all the features.


    Installation from the binary ZIP package:
    -----------------------------------------
    Unzip the package to a directory of your choice.
    

    Set the system PATH:
    --------------------
    To be able to invoke the compiler from everywhere on your computer by
    just typing "ctec", please add the directory containing ctec.exe to your
    system PATH.


    Include and library search paths
    --------------------------------
    On windows,  the standard "include" and "lib" directories are searched
    relatively from the location of the executables (ctec.exe, libctec.dll).


    Examples:
    ---------
    Open a console window (DOS box) and 'cd' to the examples directory.

    For the 'Fibonacci' example type:

	ctec fib.c

    For the 'Hello Windows' GUI example type:

	ctec hello_win.c

    For the 'Hello DLL' example type

	ctec -shared dll.c
	ctec -impdef dll.dll (optional)
        ctec hello_dll.c dll.def


    Using libctec as JIT compiler in your program
    --------------------------------------------
    Check out the 'libctec_test' example:

    - Running it from source:
        ctec -I libctec libctec/libctec.def -run examples/libctec_test.c

    - Compiling with CTEC:
        ctec examples/libctec_test.c -I libctec libctec/libctec.def

    - Compiling with MinGW:
        gcc examples/libctec_test.c -I libctec libctec.dll -o libctec_test.exe

    - Compiling with MSVC:
        lib /def:libctec\libctec.def /out:libctec.lib
        cl /MD examples/libctec_test.c -I libctec libctec.lib


    Import Definition Files:
    ------------------------
    To link with Windows system DLLs, CTEC uses import definition
    files (.def) instead of libraries.

    The now built-in 'tiny_impdef' program may be used to make
    additional .def files for any DLL. For example

        ctec -impdef [-v] opengl32.dll [-o opengl32.def]

    Put opengl32.def into the ctec/lib directory.  Specify -lopengl32 at
    the CTEC commandline to link a program that uses opengl32.dll.


    Header Files:
    -------------
    The system header files (except _mingw.h) are from the MinGW
    distribution:

	http://www.mingw.org/

    From the windows headers, only a minimal set is included.  If you need
    more,  get MinGW's "w32api" package.  Extract the files from "include"
    into your "ctec/include/winapi" directory.


    Resource Files:
    ---------------
    CTEC can link windows resources in coff format as generated by MinGW's
    windres.exe.  For example:

        windres -O coff app.rc -o appres.o
        ctec app.c appres.o -o app.exe


    Tiny Libmaker:
    --------------
    The now built-in tiny_libmaker tool by Timovj Lahde can be used as
    'ar' replacement to make a library from several object files:

	ctec -ar [rcsv] library objectfiles ...


    Compilation from source:
    ------------------------
    * You can use the MinGW and MSYS tools available at
        http://www.mingw.org
        http://www.mingw-w64.org
        http://www.msys2.org

      Untar the CTEC archive and type in the MSYS shell:
        ./configure [--prefix installpath]
        make
        make install

      The default install location is c:\Program Files\ctec

      Cygwin can be used too with its mingw cross-compiler installed:
        ./configure --cross-prefix=i686-w64-mingw32-
        (the prefix may vary)

    * Alternatively you can compile CTEC with just GCC from MinGW using
        > build-ctec.bat (from the win32 directory)

      Also MSVC can be used with the "VSTools Developer Command Prompt":
        > build-ctec.bat -c cl

      or with an existing ctec (needs to be in a different directory)
        > build-ctec.bat -c some-ctec-dir\ctec.exe

      Also you can copy/install everything into another directory:
        > build-ctec.bat -i <dir>

    Limitations:
    ------------
    - On the object file level, currently CTEC supports only the ELF format,
      not COFF as used by MinGW and MSVC.  It is not possible to exchange
      object files or libraries between CTEC and these compilers.

      However libraries for CTEC from objects by CTEC can be made using
        ctec -ar lib.a files.o ,,,

    - No leading underscore is generated in the ELF symbols.

    Documentation and License:
    --------------------------
    CTEC is distributed under the GNU Lesser General Public License. (See
    COPYING file or http://www.gnu.org/licenses/lgpl-2.1.html)

    TinyCC homepage is at:

	http://fabrice.bellard.free.fr/ctec/


    WinAPI Help and 3rd-party tools:
    --------------------------------
    The Windows API documentation (Win95) in a single .hlp file is
    available on the lcc-win32 site as "win32hlp.exe" or from other
    locations as "win32hlp_big.zip".

    A nice RAD tool to create windows resources (dialog boxes etc.) is
    "ResEd", available at the RadASM website.


    --- grischka
